#!/usr/bin/env python3
"""
Create mapping configuration for BCSS API based on Excel structure
"""

import pandas as pd

def create_mapping_excel():
    """Create the mapping Excel file based on the API requirements"""
    
    # Based on the curl you provided and the Excel structure we observed
    mapping_data = {
        'KHAI B√ÅO S·∫¢N PH·∫®M TR√äN BCSS': [
            'TH√îNG TIN S·∫¢N PH·∫®M',
            'M√£ s·∫£n ph·∫©m', 
            'T√™n s·∫£n ph·∫©m',
            'Nh√≥m s·∫£n ph·∫©m',
            'ƒê∆°n v·ªã t√≠nh',
            'SKY package code',
            'Kh·ªëi l∆∞·ª£ng',
            'M√¥ t·∫£ ti·∫øng Anh',
            'M√¥ t·∫£ ti·∫øng Vi·ªát',
            'Lo·∫°i s·∫£n ph·∫©m',
            'S·ªë ng√†y s·ª≠ d·ª•ng',
            'Dung l∆∞·ª£ng t·ªëc ƒë·ªô cao',
            'Lo·∫°i g√≥i',
            'eKYC (X√°c minh danh t√≠nh)',
            'H·∫øt t·ªëc ƒë·ªô cao gi·∫£m xu·ªëng',
            'Chia s·∫ª Wifi',
            'Lo·∫°i SIM',
            'Ph·∫°m vi ph·ªß s√≥ng',
            'SKUID',
            'Nh√† cung c·∫•p',
            'Gi√° s·∫£n ph·∫©m sau thu·∫ø',
            'Gi√° h√†ng h√≥a',
            'Thu·∫ø su·∫•t',
            'VAT'
        ],
        'MAPPING S·∫¢N PH·∫®M TR√äN FILE EXCEL VNSKY G·ª¨I': [
            None,  # Header row
            'SKUID',  # Will be combined with Days for productCode
            'Product Name Short',
            'SIM outbound',  # Fixed value
            'C√°i',  # Fixed value
            'Tr·ªëng',  # Leave blank
            'Tr·ªëng',  # Leave blank
            'The usage period is the number of days from the activation date.',  # Fixed text
            'Th·ªùi gian s·ª≠ d·ª•ng l√† s·ªë ng√†y k·ªÉ t·ª´ ng√†y k√≠ch ho·∫°t',  # Fixed text
            None,  # Product type
            'Days',
            'High Speed Data (MB or GB or GB/day)',
            'Package type',
            'Kh√¥ng b·∫Øt bu·ªôc',  # Fixed value
            'Throttled Speed (kbps)',
            'Hotspot sharing',  # Support logic applies
            'Support eSIM/Sim Card',
            'National Area',
            'SKUID',
            'Telco',
            None,  # Calculated
            'Gi√° b√°n 26.5 ( THM ƒë·ªÅ xu·∫•t)',
            None,  # Tax rate
            10  # Fixed VAT rate
        ],
        'GHI CH√ö': [
            None,
            'C·ªôt trong file s·∫£n ph·∫©m - k·∫øt h·ª£p v·ªõi Days l√†m productCode',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'Gi√° tr·ªã c·ªë ƒë·ªãnh',
            'Text c·ªë ƒë·ªãnh',
            None,
            None,
            'Text c·ªë ƒë·ªãnh',
            'Text c·ªë ƒë·ªãnh',
            None,
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'Gi√° tr·ªã c·ªë ƒë·ªãnh',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m (support = c√≥)',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m',
            'C·ªôt trong file s·∫£n ph·∫©m',
            None,
            'C·ªôt trong file s·∫£n ph·∫©m',
            None,
            'Text c·ªë ƒë·ªãnh'
        ]
    }
    
    df = pd.DataFrame(mapping_data)
    output_file = "BCSS_Mapping_Configuration.xlsx"
    df.to_excel(output_file, index=False)
    
    print(f"‚úÖ Created mapping configuration: {output_file}")
    print("\nüìã Mapping Summary:")
    for i, (bcss_field, excel_col, notes) in enumerate(zip(
        mapping_data['KHAI B√ÅO S·∫¢N PH·∫®M TR√äN BCSS'],
        mapping_data['MAPPING S·∫¢N PH·∫®M TR√äN FILE EXCEL VNSKY G·ª¨I'],
        mapping_data['GHI CH√ö']
    )):
        if pd.notna(excel_col):
            print(f"  ‚Ä¢ {bcss_field} ‚Üí {excel_col}")
            if pd.notna(notes):
                print(f"    Notes: {notes}")
    
    return output_file

def analyze_product_data():
    """Analyze the existing product data file"""
    try:
        product_data = pd.read_excel("TestImportDataOuntbound.xlsx")
        print(f"\nüìä Product Data Analysis:")
        print(f"  Rows: {len(product_data)}")
        print(f"  Columns: {len(product_data.columns)}")
        
        print(f"\nüìã Available Columns in Product Data:")
        for i, col in enumerate(product_data.columns, 1):
            print(f"  {i:2d}. {col}")
        
        print(f"\nüìÑ Sample Data (first 3 rows):")
        print(product_data.head(3).to_string())
        
        return product_data
        
    except Exception as e:
        print(f"‚ùå Error reading product data: {e}")
        return None

if __name__ == "__main__":
    print("=== BCSS Mapping Configuration Generator ===\n")
    
    # Analyze existing product data
    product_data = analyze_product_data()
    
    print("\n" + "="*60)
    
    # Create mapping configuration
    mapping_file = create_mapping_excel()
    
    print(f"\nüéØ Next Steps:")
    print(f"1. Review the mapping configuration in {mapping_file}")
    print(f"2. Update bcss_example_usage.py to use {mapping_file}")
    print(f"3. Use TestImportDataOuntbound.xlsx as your product data file")
    print(f"4. Run the BCSS integration with your Bearer token") 